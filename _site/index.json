{
  "README.html": {
    "href": "README.html",
    "title": "ASE Portfolio | Ase Project",
    "keywords": "ASE Portfolio Fill in the fields below. Prapti Acharya Your Group: 'B' Your Tutor: Resham Bhadur Pun Student Id: 77356684 Keep your progress up to date below. Put \"DONE\" after each section, when you have done it. Checkpoint 1 Version Control (1) 5 marks At least two documented commits to provided on GitHub Classroom BEFORE 12pm 7th October. At least 5 documented commits. Readme.md file filled in correctly. Done. 2 Unit Tests for basic drawing commands above (1) 5 marks Unit Test for moveto command (variables storing pen position are correct) Unit Test for drawTo command (variables storing pen position are correct) Unit Test for a multiline program. Done. 3 XML Comments/documentation produced (1) 5 marks* Fully documented with XML comments and Documentation web site produced Done. 4 Exception Handling (1) 5 marks* Done. 5 Library (DLL) installed and working with reasonable user interface (2) 10 marks Form interface with program window, output window and run button BOOSE DLL library installed call about method and display returned information in output/debug window you can use System.Diagnostics to output to the debug window Done. 6 Basic drawing commands of the library are implemented (2) 10 marks Moveto, circle, rect, pencolour, write. Unrestricted drawing programs can be run (1unrestrictedDrawing.boose) Done. Tutor's Feedback Final Submission 1 Further Version Control (1) 5 marks You must continue to use VC to a professional standard with frequent and clear commits Your Readme.md must be up to date 2 Use of Interfaces (1) 5 marks Interfaces to be used for all classes where appropriate 3 Further Unit Testing (1) 5 marks Tests for full program all of the facilities completed in 5,6 and 7 below It is up to you how design your tests (i.e. one test per facility or one test testing many but they must be clearly documented with XML comments) 4 Design Patterns (1) 5 marks Use of factory Design Pattern for command creation Demonstrate the use of another design pattern of your choice (for 5,6 and 7 you can click the links to see the example BOOSE programs that must be run, these are in your Portfolio. You must run the unrestricted programs and replace the image already there with an image of your BOOSE Interpreter running the BOOSE programs. You may show further programs in your portfolio.) 5 Replaced variables (2) Int 4 marks Real 4 marks Array 5 marks 6 Replaced if, while, for (2) While 5 marks For 6 marks If else 6 marks 7 Replaced Methods (2) 5 marks 8 Additional (web version, text-based version, extension to BOOSE itself, etc, discuss with your tutor) (2) 10 marks Tutor's Feedback note Remember that the BOOSE library is a work in progress and is likely to have bug fixes and updates. Check Discord and/or myBeckett to see if updates have been released. Report any bugs to @dmullier\\ v1.0"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.AppStoredProgram.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.AppStoredProgram.html",
    "title": "Class AppStoredProgram | Ase Project",
    "keywords": "Class AppStoredProgram Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an application-specific stored program that manages variables, methods, and execution logic. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with the specified canvas. public AppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas to associate with this program. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter, which tracks the current command being executed. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program's command list. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown if the command is null. AddMethod(Method) Adds a method to the program's method collection. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a new variable to the program's variable collection. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Checks if there are commands left to execute. public override bool Commandsleft() Returns bool true if there are remaining commands; otherwise, false. DeleteVariable(string) Deletes a variable by its name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The mathematical expression to evaluate. Returns string The result of the evaluation as a string. Exceptions StoredProgramException Thrown if the expression is invalid or contains syntax errors. EvaluateExpressionWithString(string) Evaluates an expression that may contain variables and returns the result as a string. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The evaluated result as a string. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable, or -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method to retrieve. Returns Method The method object with the specified name. Exceptions StoredProgramException Thrown if the method is not found. GetVarValue(string) Retrieves the value of a variable by its name. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The string representation of the variable's value. Exceptions StoredProgramException Thrown if the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable to retrieve. Returns Evaluation The variable object at the specified index. Exceptions StoredProgramException Thrown if the index is out of range. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The variable object with the specified name. Exceptions StoredProgramException Thrown if the variable is not found. IsExpression(string) Checks if a given string is an expression. public override bool IsExpression(string expression) Parameters expression string The string to check. Returns bool true if the string is an expression; otherwise, false. NextCommand() Retrieves the next command to be executed and increments the program counter. public override object NextCommand() Returns object The next command. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Exceptions StoredProgramException Thrown if the stack is empty. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program, clearing variables, methods, and commands, and resetting the canvas. public virtual void ResetProgram() Run() Executes all commands in the program. public override void Run() UpdateVariable(string, bool) Updates the value of a boolean variable. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new boolean value for the variable. Exceptions CommandException Thrown if the variable is not of type ApplicationBoolean. UpdateVariable(string, double) Updates the value of a real (double) variable. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new double value for the variable. Exceptions CommandException Thrown if the variable is not of type ApplicationReal. UpdateVariable(string, int) Updates the value of an integer variable. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new integer value for the variable. VariableExists(string) Checks whether a variable with the specified name exists in the program. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool true if the variable exists; otherwise, false."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationArray.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationArray.html",
    "title": "Class ApplicationArray | Ase Project",
    "keywords": "Class ApplicationArray Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an array in the application. This class is a base class for handling different types of arrays (e.g., integer, real). It supports operations like Poke and Peek on arrays and enforces array restrictions. public class ApplicationArray : Evaluation, ICommand Inheritance object Command Evaluation ApplicationArray Implements ICommand Derived ApplicationPeek ApplicationPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationArray() Initializes a new instance of the ApplicationArray class. public ApplicationArray() Fields IntValue Integer value used for array elements of type int. protected int IntValue Field Value int PEEK Constant for the \"peek\" operation, used to read array values. protected const bool PEEK = false Field Value bool POKE Constant for the \"poke\" operation, used to modify array values. public const bool POKE = true Field Value bool RealValue Real value used for array elements of type real. protected double RealValue Field Value double columnCurrent The current column index being accessed in the array. protected int columnCurrent Field Value int columnExpression Expression for column index. protected string columnExpression Field Value string columnsCount The number of columns in the array. Defaults to 1. protected int columnsCount Field Value int intArray 2D array for storing integer values. protected int[,] intArray Field Value int[,] peekValue The value to be \"peeked\" from the array. protected string peekValue Field Value string pokeValue The value to be \"poked\" into the array. protected string pokeValue Field Value string realArray 2D array for storing real values. protected double[,] realArray Field Value double[,] rowCurrent The current row index being accessed in the array. protected int rowCurrent Field Value int rowExpression Expression for row index. protected string rowExpression Field Value string rowsCount The number of rows in the array. protected int rowsCount Field Value int type Type of the array (e.g., int or real). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Placeholder method to define any restrictions for the array. Currently not implemented. public void ArrayRestrictions() CheckParameters(string[]) Checks the validity of parameters for array definition and performs necessary restrictions. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Compile() Compiles the array definition, including the type and size of the array. public override void Compile() Execute() Executes the array operation by initializing the array of the specified type. public override void Execute() GetIntArray(int, int) Gets the value at the specified row and column from the integer array. public virtual int GetIntArray(int row, int col) Parameters row int The row index of the element. col int The column index of the element. Returns int The value at the specified position in the integer array. GetRealArray(int, int) Gets the value at the specified row and column from the real array. public virtual double GetRealArray(int row, int col) Parameters row int The row index of the element. col int The column index of the element. Returns double The value at the specified position in the real array. ProcessArrayParametersCompile(bool) Compiles the array parameters for a Poke or Peek operation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is Poke (true) or Peek (false). ProcessArrayParametersExecute(bool) Executes the array operation, either Poke or Peek, by resolving row, column, and value expressions, and performing the appropriate array operation (setting or getting values). protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is Poke (true) or Peek (false). ReduceRestrictionCounter() Reduces the restriction counter. Placeholder for future implementation. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets the value at the specified row and column in the integer array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set in the array. row int The row index of the element. col int The column index of the element. SetRealArray(double, int, int) Sets the value at the specified row and column in the real array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set in the array. row int The row index of the element. col int The column index of the element."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationBoolean.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationBoolean.html",
    "title": "Class ApplicationBoolean | Ase Project",
    "keywords": "Class ApplicationBoolean Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a Boolean variable in the application, inheriting from the BOOSE.Boolean class. This class may include specific restrictions or additional functionality in the future. public class ApplicationBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean ApplicationBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines any restrictions for the Boolean type variable. Currently, this method does not enforce any restrictions but can be extended in the future. public override void Restrictions()"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationCast.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationCast.html",
    "title": "Class ApplicationCast | Ase Project",
    "keywords": "Class ApplicationCast Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a cast operation in the application, which converts an integer variable's value into a real variable's value. Inherits from BOOSE.Command. public class ApplicationCast : Command, ICommand Inheritance object Command ApplicationCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed to the \"Cast\" command. Ensures that exactly two parameters are provided: the source and target variable names. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters passed to the \"Cast\" command. Exceptions CommandException Thrown if the number of parameters is not exactly two. Compile() Compiles the \"Cast\" command by verifying the existence of the source and target variables. Initializes the source and target command objects based on the provided variable names. public override void Compile() Exceptions CommandException Thrown if one or both of the variables do not exist in the program. Execute() Executes the \"Cast\" operation, converting the value of the source integer variable into the target real variable. public override void Execute() Exceptions InvalidCastException Thrown if the source variable is not an integer or if the cast operation is invalid."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationCompoundCommand.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | Ase Project",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class ApplicationCompoundCommand : ApplicationConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand Implements ICommand Derived ApplicationElse ApplicationEnd ApplicationIf ApplicationWhile Inherited Members ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() public ApplicationCompoundCommand() Properties CorrespondingCommand public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() public override void Compile() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationConditionalCommand.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationConditionalCommand.html",
    "title": "Class ApplicationConditionalCommand | Ase Project",
    "keywords": "Class ApplicationConditionalCommand Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class ApplicationConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationElse.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationElse.html",
    "title": "Class ApplicationElse | Ase Project",
    "keywords": "Class ApplicationElse Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents the \"Else\" compound command in the application, which handles the alternative execution of a conditional block. Inherits from ApplicationCompoundCommand. public class ApplicationElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationElse() Initializes a new instance of the ApplicationElse class. public ApplicationElse() Properties CorrespondingEnd Gets or sets the corresponding \"End\" command associated with the \"Else\" command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters for the \"Else\" command. Ensures that the parameters array contains exactly one element, and that it equals \"else\". public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters passed to the \"Else\" command. Exceptions CommandException Thrown if the parameters are invalid (not equal to \"else\" or more than one parameter is provided). Compile() Compiles the \"Else\" command by finding the corresponding command in the program, setting the line number for the command, and pushing the \"Else\" command onto the program stack. public override void Compile() Execute() Executes the \"Else\" command by checking the condition of the corresponding command. If the condition is true, it sets the program counter to the line number where the \"End\" command is located. public override void Execute()"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationEnd.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationEnd.html",
    "title": "Class ApplicationEnd | Ase Project",
    "keywords": "Class ApplicationEnd Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents the \"End\" compound command in the application, which handles the termination of loops and conditional structures. Inherits from ApplicationCompoundCommand. public class ApplicationEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationEnd() Initializes a new instance of the ApplicationEnd class. public ApplicationEnd() Methods Compile() Compiles the \"End\" command by identifying the corresponding loop or conditional command and validating the syntax for matching parameters. public override void Compile() Exceptions CommandException Thrown when the corresponding command is an invalid type or when the parameter list does not contain the expected value. Execute() Executes the \"End\" command by determining the appropriate action for the corresponding command. For loops, it updates the loop control variable and adjusts the program counter. For conditionals, it simply marks the end of the block. public override void Execute() Exceptions CommandException Thrown if the loop control variable does not exist or if the loop step leads to an invalid condition."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationFor.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationFor.html",
    "title": "Class ApplicationFor | Ase Project",
    "keywords": "Class ApplicationFor Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an application-specific implementation of a for-loop control structure. public class ApplicationFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ApplicationFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class inherits from the base For class and may override or extend its functionality to meet the specific requirements of the application. It provides additional logic for parsing, validating, or executing for-loop commands within the application's context. Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationIf.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationIf.html",
    "title": "Class ApplicationIf | Ase Project",
    "keywords": "Class ApplicationIf Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an \"If\" compound command in the application, inheriting from ApplicationCompoundCommand. public class ApplicationIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationIf() Initializes a new instance of the ApplicationIf class. public ApplicationIf() Methods ReduceRestrictions() Reduces any restrictions associated with the \"If\" command. protected void ReduceRestrictions() Remarks Currently, no restrictions are applied in this implementation."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationInt.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationInt.html",
    "title": "Class ApplicationInt | Ase Project",
    "keywords": "Class ApplicationInt Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an integer type in the application, inheriting from BOOSE.Int. public class ApplicationInt : Int, ICommand Inheritance object Command Evaluation Int ApplicationInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Applies any restrictions for the integer type. public override void Restrictions() Remarks Currently, no restrictions are applied for the integer type in this implementation."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationMethod.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationMethod.html",
    "title": "Class ApplicationMethod | Ase Project",
    "keywords": "Class ApplicationMethod Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents an application-specific implementation of a method control structure. public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class extends the base Method class, providing additional functionality or overrides to support the execution and management of methods within the application's context. It can include logic for parsing method definitions, handling method calls, and managing parameters and return values. Constructors ApplicationMethod() public ApplicationMethod() Methods ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int ResetOrDecreaseMethodCount(int) public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationPeek.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationPeek.html",
    "title": "Class ApplicationPeek | Ase Project",
    "keywords": "Class ApplicationPeek Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents the \"Peek\" operation for arrays in the application, inheriting from ApplicationArray. public class ApplicationPeek : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPeek Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPeek() Initializes a new instance of the ApplicationPeek class. public ApplicationPeek() Methods CheckParameters(string[]) Checks the parameters for the \"Peek\" operation. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate for the operation. Exceptions NotImplementedException This method is not yet implemented for parameter validation. Compile() Compiles the parameters for the \"Peek\" operation. public override void Compile() Execute() Executes the \"Peek\" operation on an array. public override void Execute() Remarks The method checks the type of the array and updates the corresponding variable with the value from the array. Throws an exception if the array type is unsupported."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationPoke.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationPoke.html",
    "title": "Class ApplicationPoke | Ase Project",
    "keywords": "Class ApplicationPoke Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a Poke operation, inheriting from ApplicationArray. public class ApplicationPoke : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPoke Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPoke() Initializes a new instance of the ApplicationPoke class. public ApplicationPoke() Methods CheckParameters(string[]) Checks the validity of the parameters for the Poke operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters to validate. Exceptions CommandException Thrown if the number of parameters is not 2 or 3. Compile() Compiles the Poke operation, processing array parameters as needed. public override void Compile() Execute() Executes the Poke operation, performing the required array processing. public override void Execute() Set(StoredProgram, string) Sets the Poke operation's parameters and associated program. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The BOOSE.StoredProgram instance to associate with the operation. paramsList string The list of parameters for the Poke operation."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationReal.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationReal.html",
    "title": "Class ApplicationReal | Ase Project",
    "keywords": "Class ApplicationReal Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a real number application, inheriting from the BOOSE.Real class. public class ApplicationReal : Real, ICommand Inheritance object Command Evaluation Real ApplicationReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Specifies any restrictions or constraints on the real number. public override void Restrictions() Remarks This method is intended to be overridden to define specific restrictions for derived classes. Currently, it does not implement any restrictions."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationWhile.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.ApplicationWhile.html",
    "title": "Class ApplicationWhile | Ase Project",
    "keywords": "Class ApplicationWhile Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a \"while\" loop application, inheriting from ApplicationCompoundCommand. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Reduces the restrictions or conditions specific to the \"while\" loop. protected void ReduceRestrictions() Remarks This method is currently empty but can be overridden or extended to manage restrictions for the \"while\" loop logic."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.Clear.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.Clear.html",
    "title": "Class Clear | Ase Project",
    "keywords": "Class Clear Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() public Clear() Clear(Canvas) public Clear(Canvas c) Parameters c Canvas Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.DrawCircle.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.DrawCircle.html",
    "title": "Class DrawCircle | Ase Project",
    "keywords": "Class DrawCircle Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to draw a circle on the canvas with a specified radius. public class DrawCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter DrawCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The DrawCircle class inherits from BOOSE.CommandOneParameter and provides functionality to validate parameters and execute the circle drawing operation on the canvas. The radius is validated to ensure it does not exceed restrictions or canvas boundaries. Constructors DrawCircle() Initializes a new instance of the DrawCircle class. public DrawCircle() Remarks This constructor is parameterless and intended for cases where the radius is set later. DrawCircle(Canvas, int) Initializes a new instance of the DrawCircle class with a specified canvas and radius. public DrawCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle to be drawn. Remarks The provided radius is stored and used during the execution of the command. Methods CheckParameters(string[]) Validates the parameters provided for the circle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the command input. Remarks This method checks for exactly one parameter and ensures it is a valid positive integer. If validation fails, a BOOSE.CommandException is thrown and logged. Exceptions CommandException Thrown if: The number of parameters is not exactly one. The radius is not a valid positive integer. Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the circle drawing command on the canvas. public override void Execute() Remarks This method validates the radius, checks for restrictions, and draws a circle on the canvas. If the radius exceeds 2000 or if an error occurs, appropriate exceptions are handled and logged. Exceptions IndexOutOfRangeException Thrown if the parameters provided are insufficient or invalid. RestrictionException Thrown if the radius exceeds the maximum allowed value of 2000. Exception Thrown if an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.DrawRectangle.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.DrawRectangle.html",
    "title": "Class DrawRectangle | Ase Project",
    "keywords": "Class DrawRectangle Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to draw a rectangle on the canvas with specified width and height. public class DrawRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters DrawRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The DrawRectangle class inherits from BOOSE.CommandTwoParameters and provides functionality to validate parameters and execute the rectangle drawing operation on the canvas. Width and height are validated to ensure they do not exceed restrictions or canvas boundaries. Constructors DrawRectangle() Initializes a new instance of the DrawRectangle class. public DrawRectangle() Remarks This parameterless constructor is intended for cases where width and height are set later. DrawRectangle(Canvas, int, int) Initializes a new instance of the DrawRectangle class with a specified canvas, width, and height. public DrawRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Remarks The provided dimensions are stored and used during the execution of the command. Methods CheckParameters(string[]) Validates the parameters provided for the rectangle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the command input. Remarks This method checks for exactly two parameters and ensures they are valid positive integers. If validation fails, a BOOSE.CommandException is thrown and logged. Exceptions CommandException Thrown if: The number of parameters is not exactly two. Width or height is not a valid positive integer. Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the rectangle drawing command on the canvas. public override void Execute() Remarks This method validates the width and height, checks for restrictions, and draws a rectangle on the canvas. If the dimensions exceed 2000 or if an error occurs, appropriate exceptions are handled and logged. Exceptions IndexOutOfRangeException Thrown if the parameters provided are insufficient or invalid. RestrictionException Thrown if the width or height exceeds the maximum allowed value of 2000. Exception Thrown if an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.DrawToPosition.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.DrawToPosition.html",
    "title": "Class DrawToPosition | Ase Project",
    "keywords": "Class DrawToPosition Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to draw a line from the current position to a specified position on the canvas. public class DrawToPosition : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters DrawToPosition Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The DrawToPosition class inherits from BOOSE.CommandTwoParameters and provides functionality to validate parameters and execute the line drawing operation on the canvas. Coordinates are validated to ensure they are non-negative. Constructors DrawToPosition() Initializes a new instance of the DrawToPosition class. public DrawToPosition() Remarks This parameterless constructor is intended for cases where coordinates are set later. DrawToPosition(Canvas, int, int) Initializes a new instance of the DrawToPosition class with a specified canvas and coordinates. public DrawToPosition(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the line will be drawn. x int The x-coordinate of the destination point. y int The y-coordinate of the destination point. Remarks The provided coordinates are validated to ensure they are non-negative and are stored for later use during execution. Exceptions RestrictionException Thrown if the coordinates are negative. Methods CheckParameters(string[]) Validates the parameters provided for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the command input. Remarks This method checks for exactly two parameters and ensures they are valid non-negative integers. If validation fails, a BOOSE.CommandException is thrown and logged. Exceptions CommandException Thrown if: The number of parameters is not exactly two. One or both coordinates are not valid non-negative integers. Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the line drawing command to the specified position on the canvas. public override void Execute() Remarks This method validates the coordinates, checks for restrictions, and draws a line to the specified position on the canvas. If the coordinates are negative or an error occurs, appropriate exceptions are handled and logged. Exceptions IndexOutOfRangeException Thrown if the parameters provided are insufficient or invalid. RestrictionException Thrown if the coordinates are negative. Exception Thrown if an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.Fill.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.Fill.html",
    "title": "Class Fill | Ase Project",
    "keywords": "Class Fill Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to toggle the fill state of drawing operations on the canvas. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Fill class inherits from BOOSE.CommandOneParameter and provides functionality to validate and apply the fill state based on user input. The input can either enable or disable filling of shapes. Constructors Fill() Initializes a new instance of the Fill class. public Fill() Remarks This parameterless constructor is intended for cases where parameters are set later. Fill(Canvas, string) Initializes a new instance of the Fill class with a specified canvas and fill state. public Fill(Canvas c, string text) Parameters c Canvas The canvas on which the fill state will be applied. text string The fill state as a string (\"true\" or \"false\"). Remarks The provided fill state is validated to ensure it is not null and stored for later use during execution. Exceptions ArgumentNullException Thrown if the provided text is null. Methods CheckParameters(string[]) Validates the parameters provided for the fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the command input. Remarks This method checks for exactly one parameter and ensures it is a valid non-empty string. If validation fails, a BOOSE.CommandException is thrown and logged. Exceptions CommandException Thrown if: The number of parameters is not exactly one. The text parameter is null, empty, or whitespace. Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the command to set the fill state on the canvas. public override void Execute() Remarks This method validates the input string, applies the fill state, and handles any restrictions. If the input is invalid, appropriate exceptions are logged. Exceptions RestrictionException Thrown if: The text parameter is null, empty, or whitespace. The text exceeds 5 characters in length. Exception Thrown if an unexpected error occurs during execution. SetFilled(string) Applies the fill state to the global configuration. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string representing the fill state (\"true\" or \"false\"). Remarks This method toggles the global fill state based on the input string. If the input is invalid, a BOOSE.CommandException is thrown and the fill state defaults to false. Exceptions CommandException Thrown if the input string is not \"true\" or \"false\" (case-insensitive)."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.Form1.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.Form1.html",
    "title": "Class Form1 | Ase Project",
    "keywords": "Class Form1 Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.GlobalConfig.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.GlobalConfig.html",
    "title": "Class GlobalConfig | Ase Project",
    "keywords": "Class GlobalConfig Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Provides global configuration settings for canvas operations. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The GlobalConfig class stores application-wide settings that influence canvas behaviors, such as whether shapes are drawn in a filled or unfilled state. Properties IsFillEnabled public static bool IsFillEnabled { get; set; } Property Value bool MaxX public static int MaxX { get; set; } Property Value int MaxY public static int MaxY { get; set; } Property Value int PenSize public static int PenSize { get; set; } Property Value int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MoveToPosition.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MoveToPosition.html",
    "title": "Class MoveToPosition | Ase Project",
    "keywords": "Class MoveToPosition Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to move the current drawing position on the canvas. public class MoveToPosition : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MoveToPosition Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The MoveToPosition class inherits from BOOSE.CommandTwoParameters and allows the user to specify a new position on the canvas. The specified coordinates must be within the allowed range. Constructors MoveToPosition() Initializes a new instance of the MoveToPosition class. public MoveToPosition() Remarks This parameterless constructor is useful when parameters will be set later. MoveToPosition(Canvas, int, int) Initializes a new instance of the MoveToPosition class with a canvas and coordinates. public MoveToPosition(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the position will be moved to. x int The x-coordinate of the new position. y int The y-coordinate of the new position. Remarks Ensures that the coordinates are within the allowable range before setting them. Exceptions RestrictionException Thrown if the x or y coordinate exceeds 2000. Methods CheckParameters(string[]) Validates the parameters provided for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the command input. Remarks Ensures that two valid non-negative integer parameters are provided. If validation fails, appropriate exceptions are thrown and logged. Exceptions CommandException Thrown if: The number of parameters is not exactly two. Any coordinate is negative or invalid. Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the command to move to the specified position on the canvas. public override void Execute() Remarks Validates the coordinates and moves the current position. Handles any restrictions or exceptions related to invalid inputs. Exceptions IndexOutOfRangeException Thrown if the required parameters are not provided. RestrictionException Thrown if the x or y coordinate exceeds 2000. Exception Thrown if an unexpected error occurs during execution."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas.MyCanvas.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas.MyCanvas.html",
    "title": "Class MyCanvas | Ase Project",
    "keywords": "Class MyCanvas Namespace ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class MyCanvas : ICanvas Inheritance object MyCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors MyCanvas() Initializes a new instance of the ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas class with default canvas size. public MyCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas.html",
    "title": "Namespace ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas | Ase Project",
    "keywords": "Namespace ASE_Assignment_Prapti_Acharya_77356684.MyAppCanvas Classes MyCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MyCommandFactory.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MyCommandFactory.html",
    "title": "Class MyCommandFactory | Ase Project",
    "keywords": "Class MyCommandFactory Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll A factory class for creating command objects based on user input. public class MyCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory MyCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The MyCommandFactory class extends the BOOSE.CommandFactory base class to provide specific implementations of commands. It maps command strings to corresponding command objects that execute various canvas operations. Constructors MyCommandFactory() Initializes a new instance of the MyCommandFactory class. public MyCommandFactory() Methods MakeCommand(string) Creates a command object based on the specified command string. public override ICommand MakeCommand(string command) Parameters command string The name of the command to create. Returns ICommand An instance of a class that implements the BOOSE.ICommand interface. Remarks Supported commands: circleCreates a DrawCircle command. movetoCreates a MoveToPosition command. rectCreates a DrawRectangle command. triCreates a Triangle command. writetoCreates a WriteTextToCanvas command. drawtoCreates a DrawToPosition command. pencolourCreates a SetPenColour command. fillCreates a Fill command. clearCreates a Clear command. resetCreates a Reset command. Exceptions FactoryException Thrown when the specified command does not match any known command."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MyParser.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MyParser.html",
    "title": "Class MyParser | Ase Project",
    "keywords": "Class MyParser Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll This class implements the IParser interface and is responsible for parsing commands and programs, handling syntax validation, and creating commands using a command factory. public class MyParser : IParser Inheritance object MyParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyParser(CommandFactory, StoredProgram) Initializes a new instance of the MyParser class. public MyParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The factory used to create commands. program StoredProgram The stored program that will be parsed. Methods ParseCommand(string) Parses a single line of input into a corresponding command. public virtual ICommand ParseCommand(string line) Parameters line string The line to parse. Returns ICommand An ICommand that represents the parsed line. Exceptions ParserException Thrown if there is an error in parsing or if a variable does not exist. ParseProgram(string) Parses a complete program, processing each line and handling errors. public virtual void ParseProgram(string program) Parameters program string The program string to parse."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.MyPenSize.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.MyPenSize.html",
    "title": "Class MyPenSize | Ase Project",
    "keywords": "Class MyPenSize Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class MyPenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyPenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPenSize() public MyPenSize() MyPenSize(Canvas, int) public MyPenSize(Canvas c, int pensize) Parameters c Canvas pensize int Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute() SetPenSize(int) public void SetPenSize(int penSize) Parameters penSize int"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.Reset.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.Reset.html",
    "title": "Class Reset | Ase Project",
    "keywords": "Class Reset Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() public Reset() Reset(Canvas) public Reset(Canvas c) Parameters c Canvas Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.SetPenColour.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.SetPenColour.html",
    "title": "Class SetPenColour | Ase Project",
    "keywords": "Class SetPenColour Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Sets the pen color on the canvas using RGB values. public class SetPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters SetPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The SetPenColour class sets the pen color by specifying the red, green, and blue color components in the range of 0 to 255. This is used for drawing or rendering shapes with the specified color on the canvas. Constructors SetPenColour() Initializes a new instance of the SetPenColour class. public SetPenColour() SetPenColour(Canvas, int, int, int) Initializes a new instance of the SetPenColour class with specified RGB values. public SetPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas to set the pen color on. r int The red component of the color (0 to 255). g int The green component of the color (0 to 255). b int The blue component of the color (0 to 255). Methods CheckParameters(string[]) Checks the parameters to ensure they are valid RGB values. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Exceptions CommandException Thrown if the number of parameters is not three or if any of the RGB values are invalid. Exception Thrown if an unexpected error occurs during the check. Execute() Executes the command to set the pen color on the canvas. public override void Execute() Exceptions IndexOutOfRangeException Thrown if the number of parameters provided is incorrect. RestrictionException Thrown if any of the RGB components are outside the valid range (0 to 255). Exception Thrown if an unexpected error occurs during the execution."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.Triangle.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.Triangle.html",
    "title": "Class Triangle | Ase Project",
    "keywords": "Class Triangle Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command that draws a triangle on the canvas with specified base length and height. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The Triangle class is responsible for drawing a triangle on the canvas by specifying the base length and height. It ensures that both the base length and height do not exceed the allowed maximum size. Constructors Triangle() Initializes a new instance of the Triangle class. public Triangle() Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with the specified base length and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Checks the validity of the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to check. Exceptions CommandException Thrown if the number of parameters is not exactly two (base length and height). Exception Thrown if an unexpected error occurs during parameter validation. Execute() Executes the command to draw the triangle on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the base length or height exceeds the maximum allowed value of 2000. Exception Thrown if an unexpected error occurs during the execution of the command."
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.WriteTextToCanvas.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.WriteTextToCanvas.html",
    "title": "Class WriteTextToCanvas | Ase Project",
    "keywords": "Class WriteTextToCanvas Namespace ASE_Assignment_Prapti_Acharya_77356684 Assembly ASE_Assignment_Prapti-Acharya_77356684.dll Represents a command to write text to a canvas. This command processes and validates text input before displaying it on the canvas. public class WriteTextToCanvas : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTextToCanvas Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTextToCanvas() Initializes a new instance of the WriteTextToCanvas class with no parameters. public WriteTextToCanvas() WriteTextToCanvas(Canvas, string) Initializes a new instance of the WriteTextToCanvas class with a specified canvas and text. public WriteTextToCanvas(Canvas c, string text) Parameters c Canvas The canvas on which text will be written. text string The text to write to the canvas. Methods CheckParameters(string[]) Validates the parameters provided for the command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array containing the parameters for the command. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the command to write text to the canvas after processing and validation. public override void Execute()"
  },
  "api/ASE_Assignment_Prapti_Acharya_77356684.html": {
    "href": "api/ASE_Assignment_Prapti_Acharya_77356684.html",
    "title": "Namespace ASE_Assignment_Prapti_Acharya_77356684 | Ase Project",
    "keywords": "Namespace ASE_Assignment_Prapti_Acharya_77356684 Classes AppStoredProgram Represents an application-specific stored program that manages variables, methods, and execution logic. ApplicationArray Represents an array in the application. This class is a base class for handling different types of arrays (e.g., integer, real). It supports operations like Poke and Peek on arrays and enforces array restrictions. ApplicationBoolean Represents a Boolean variable in the application, inheriting from the BOOSE.Boolean class. This class may include specific restrictions or additional functionality in the future. ApplicationCast Represents a cast operation in the application, which converts an integer variable's value into a real variable's value. Inherits from BOOSE.Command. ApplicationCompoundCommand ApplicationConditionalCommand ApplicationElse Represents the \"Else\" compound command in the application, which handles the alternative execution of a conditional block. Inherits from ApplicationCompoundCommand. ApplicationEnd Represents the \"End\" compound command in the application, which handles the termination of loops and conditional structures. Inherits from ApplicationCompoundCommand. ApplicationFor Represents an application-specific implementation of a for-loop control structure. ApplicationIf Represents an \"If\" compound command in the application, inheriting from ApplicationCompoundCommand. ApplicationInt Represents an integer type in the application, inheriting from BOOSE.Int. ApplicationMethod Represents an application-specific implementation of a method control structure. ApplicationPeek Represents the \"Peek\" operation for arrays in the application, inheriting from ApplicationArray. ApplicationPoke Represents a Poke operation, inheriting from ApplicationArray. ApplicationReal Represents a real number application, inheriting from the BOOSE.Real class. ApplicationWhile Represents a \"while\" loop application, inheriting from ApplicationCompoundCommand. Clear DrawCircle Represents a command to draw a circle on the canvas with a specified radius. DrawRectangle Represents a command to draw a rectangle on the canvas with specified width and height. DrawToPosition Represents a command to draw a line from the current position to a specified position on the canvas. Fill Represents a command to toggle the fill state of drawing operations on the canvas. Form1 GlobalConfig Provides global configuration settings for canvas operations. MoveToPosition Represents a command to move the current drawing position on the canvas. MyCommandFactory A factory class for creating command objects based on user input. MyParser This class implements the IParser interface and is responsible for parsing commands and programs, handling syntax validation, and creating commands using a command factory. MyPenSize Reset SetPenColour Sets the pen color on the canvas using RGB values. Triangle Represents a command that draws a triangle on the canvas with specified base length and height. WriteTextToCanvas Represents a command to write text to a canvas. This command processes and validates text input before displaying it on the canvas."
  },
  "api/ASE_Assignment_Test.ASE_Assignment_Test.MyCanvasTest.html": {
    "href": "api/ASE_Assignment_Test.ASE_Assignment_Test.MyCanvasTest.html",
    "title": "Class MyCanvasTest | Ase Project",
    "keywords": "Class MyCanvasTest Namespace ASE_Assignment_Test.ASE_Assignment_Test Assembly ASE_Assignment_Test.dll [TestClass] public sealed class MyCanvasTest Inheritance object MyCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas The canvas object used for testing. public MyCanvas canvas Field Value MyCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests handling of out-of-bounds coordinates when drawing. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Tests handling of null graphics context when drawing. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests updating cursor position with valid drawing coordinates. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests handling of out-of-bounds coordinates when moving. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests updating cursor position with valid coordinates. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Tests drawing a filled rectangle with valid dimensions. [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Tests handling of invalid dimensions for rectangle drawing. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() Reset_ShouldSetCursorToOrigin() Tests resetting cursor position to the origin. [TestMethod] public void Reset_ShouldSetCursorToOrigin() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests initializing the canvas with a valid bitmap and graphics context. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Tests handling of invalid RGB values for pen color. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetColour_ShouldUpdatePenColor_WhenRGBValuesAreValid() Tests updating pen color with valid RGB values. [TestMethod] public void SetColour_ShouldUpdatePenColor_WhenRGBValuesAreValid() SetUp() Initializes the test canvas object before each test. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests pen positions at canvas boundaries. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Tests that a circle exceeding canvas boundaries throws a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests the initialization of custom canvas dimensions. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDrawCircleInvalidRadius() Tests handling of invalid circle radius. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Tests drawing a valid circle. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Tests exceeding maximum canvas size, expecting a CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestGetBitmapReturnsValidBitmap() Tests retrieving a valid bitmap instance from the canvas. [TestMethod] public void TestGetBitmapReturnsValidBitmap() TestInvalidCanvasSize_ShouldThrowCanvasException() Tests that invalid canvas dimensions throw a CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests resetting the canvas. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting a valid pen color. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests handling of invalid pen positions. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting valid pen positions. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests handling of invalid pen sizes. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests setting a valid pen size. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling shape filling state. [TestMethod] public void TestToggleShapeFilling() TestTriangleStartsOutOfBounds() Tests handling of out-of-bounds starting position for triangle drawing. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestTriangleStartsOutOfBounds() TestTriangleWithFilledAndOutlinedModes() Tests drawing triangles in filled and outlined modes. [TestMethod] public void TestTriangleWithFilledAndOutlinedModes() WriteText_ShouldRenderText_WhenValidInput() Tests rendering text with valid input. [TestMethod] public void WriteText_ShouldRenderText_WhenValidInput() WriteText_ShouldThrowException_WhenTextIsNull() Tests handling of null input for text rendering. [TestMethod] [ExpectedException(typeof(CanvasException))] public void WriteText_ShouldThrowException_WhenTextIsNull()"
  },
  "api/ASE_Assignment_Test.ASE_Assignment_Test.html": {
    "href": "api/ASE_Assignment_Test.ASE_Assignment_Test.html",
    "title": "Namespace ASE_Assignment_Test.ASE_Assignment_Test | Ase Project",
    "keywords": "Namespace ASE_Assignment_Test.ASE_Assignment_Test Classes MyCanvasTest"
  },
  "api/ASE_Assignment_Test.CircleTest.html": {
    "href": "api/ASE_Assignment_Test.CircleTest.html",
    "title": "Class CircleTest | Ase Project",
    "keywords": "Class CircleTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the DrawCircle class. [TestClass] public class CircleTest Inheritance object CircleTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method of the DrawCircle class does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the DrawCircle constructor initializes correctly when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test setup by creating a new mock instance of Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.ClearTest.html": {
    "href": "api/ASE_Assignment_Test.ClearTest.html",
    "title": "Class ClearTest | Ase Project",
    "keywords": "Class ClearTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the Clear class. [TestClass] public class ClearTest Inheritance object ClearTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that the CheckParameters method ignores unexpected or additional parameters without throwing exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that the CheckParameters method does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the Clear constructor initializes correctly when a valid Canvas object is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests that the Execute method clears the Canvas when a valid Canvas object is provided. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests that the Execute method gracefully handles a null Canvas by throwing a NullReferenceException. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests that the Execute method does not throw an exception even when the Canvas is empty. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test setup by creating a new mock instance of Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.CommandFactoryTest.html": {
    "href": "api/ASE_Assignment_Test.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | Ase Project",
    "keywords": "Class CommandFactoryTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing a new AppCommandFactory instance. [TestInitialize] public void SetUp() TestMakeCommand_Array_ShouldReturnReset() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnReset() TestMakeCommand_Boolean_ShouldReturnReset() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnReset() TestMakeCommand_Call_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnReset() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a DrawCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a Clear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a DrawToPosition object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Else_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnReset() TestMakeCommand_End_ShouldReturnReset() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnReset() TestMakeCommand_Evaluation_ShouldReturnReset() Tests that the \"call\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnReset() TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a Fill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_For_ShouldReturnReset() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnReset() TestMakeCommand_If_ShouldReturnReset() Tests that the \"else\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnReset() TestMakeCommand_Int_ShouldReturnReset() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnReset() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a MoveToPosition object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_Peek_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnReset() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the \"pencolour\" command returns a SetPenColour object. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a MyPenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Poke_ShouldReturnReset() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnReset() TestMakeCommand_Real_ShouldReturnReset() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnReset() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a DrawRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a Rese object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a Triangle object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_While_ShouldReturnReset() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnReset() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a WriteTextToCanvas object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() TestMakeCommand_method_ShouldReturnReset() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnReset()"
  },
  "api/ASE_Assignment_Test.CommandTest.html": {
    "href": "api/ASE_Assignment_Test.CommandTest.html",
    "title": "Class CommandTest | Ase Project",
    "keywords": "Class CommandTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll [TestClass] public class CommandTest Inheritance object CommandTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_ArrayCommand_Restricted() Tests the behavior of restricted array commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_ArrayCommand_Restricted() Test_ArrayCommand_UnRestricted() Tests the behavior of unrestricted array commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_ArrayCommand_UnRestricted() Test_ForCommand_Restricted() Tests the behavior of a restricted for-loop command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_ForCommand_Restricted() Test_ForCommand_Unrestricted() Tests the behavior of an unrestricted for-loop command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_ForCommand_Unrestricted() Test_IFCommand_Restricted() Tests the behavior of an unrestricted if-statement command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_IFCommand_Restricted() Test_IFCommand_Unrestricted() Tests the behavior of an unrestricted if-statement command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_IFCommand_Unrestricted() Test_IntCommand_Restricted() Tests the behavior of restricted integer commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_IntCommand_Restricted() Test_IntCommand_UnRestricted() Tests the behavior of unrestricted integer commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_IntCommand_UnRestricted() Test_MethodCommand_UnRestricted() Tests the behavior of unrestricted method execution commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_MethodCommand_UnRestricted() Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Verifies that running multiple commands does not alter the global output or throw any exceptions. [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_ProgramSizeCommand_UnRestricted() Tests the behavior of a program with a large number of commands, ensuring no exceptions are thrown during execution. [TestMethod] public void Test_ProgramSizeCommand_UnRestricted() Test_RealCommand_Restricted() Tests the behavior of restricted real-number commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_RealCommand_Restricted() Test_RealCommand_Unrestricted() Tests the behavior of unrestricted real-number commands and ensures no exceptions are thrown during execution. [TestMethod] public void Test_RealCommand_Unrestricted() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() Tests the behavior of a restricted while-loop command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_WhileCommand_Restricted() Test_WhileCommand_Unrestricted() Tests the behavior of an unrestricted while-loop command and ensures no exceptions are thrown during execution. [TestMethod] public void Test_WhileCommand_Unrestricted()"
  },
  "api/ASE_Assignment_Test.DrawRectangleTest.html": {
    "href": "api/ASE_Assignment_Test.DrawRectangleTest.html",
    "title": "Class DrawRectangleTest | Ase Project",
    "keywords": "Class DrawRectangleTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the DrawRectangle class, which draws a rectangle on a BOOSE.Canvas. [TestClass] public class DrawRectangleTest Inheritance object DrawRectangleTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw any exceptions when valid parameters (width and height as strings) are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of the DrawRectangle class initializes the object correctly when valid parameters (width and height) are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the mock BOOSE.Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.DrawToPositionTest.html": {
    "href": "api/ASE_Assignment_Test.DrawToPositionTest.html",
    "title": "Class DrawToPositionTest | Ase Project",
    "keywords": "Class DrawToPositionTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the DrawToPosition class. [TestClass] public class DrawToPositionTest Inheritance object DrawToPositionTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw any exception when given valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes the command instance correctly when parameters are valid. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests that the constructor throws a BOOSE.RestrictionException when the X or Y coordinates are negative. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes a new instance of the DrawToPositionTest class and sets up the mock Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.FillTest.html": {
    "href": "api/ASE_Assignment_Test.FillTest.html",
    "title": "Class FillTest | Ase Project",
    "keywords": "Class FillTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the Fill class. [TestClass] public class FillTest Inheritance object FillTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitialize_WhenTextIsValid() Tests that the Fill constructor initializes correctly when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests that the Fill constructor throws an ArgumentNullException when the text parameter is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() TestInitialize() Initializes the test setup by creating a new mock instance of Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.GlobalConfigTest.html": {
    "href": "api/ASE_Assignment_Test.GlobalConfigTest.html",
    "title": "Class GlobalConfigTest | Ase Project",
    "keywords": "Class GlobalConfigTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll This test class validates the functionality of the GlobalConfig class. It ensures that the properties of GlobalConfig can be correctly set and retrieved. [TestClass] public class GlobalConfigTest Inheritance object GlobalConfigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields canvas Represents a canvas object to be used in tests. public MyCanvas canvas Field Value MyCanvas Methods TestSetAndGetIsFillEnabled() Tests setting and getting the IsFillEnabled property of the GlobalConfig class. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests setting and getting the MaxX property of the GlobalConfig class. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests setting and getting the MaxY property of the GlobalConfig class. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests setting and getting the PenSize property of the GlobalConfig class. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_Assignment_Test.MoveToPositionTest.html": {
    "href": "api/ASE_Assignment_Test.MoveToPositionTest.html",
    "title": "Class MoveToPositionTest | Ase Project",
    "keywords": "Class MoveToPositionTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the MoveToPosition class. [TestClass] public class MoveToPositionTest Inheritance object MoveToPositionTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw any exception when given valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor initializes the command instance correctly when parameters are valid. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Tests that the constructor throws a BOOSE.RestrictionException when the X or Y coordinates exceed the limit of 2000. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes a new instance of the MoveToPositionTest class and sets up the mock Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.MyCommandFactoryTest.html": {
    "href": "api/ASE_Assignment_Test.MyCommandFactoryTest.html",
    "title": "Class MyCommandFactoryTest | Ase Project",
    "keywords": "Class MyCommandFactoryTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the MyCommandFactory class. [TestClass] public class MyCommandFactoryTest Inheritance object MyCommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes the test setup by creating a new instance of MyCommandFactory. [TestInitialize] public void SetUp() TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the 'circle' command returns an instance of DrawCircle. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Tests that the 'clear' command returns an instance of Clear. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the 'drawto' command returns an instance of DrawToPosition. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Fill_ShouldReturnFill() Tests that the 'fill' command returns an instance of Fill. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that an invalid command throws a FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the 'moveto' command returns an instance of MoveToPosition. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the 'pencolour' command returns an instance of SetPenColour. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the 'pensize' command returns an instance of MyPenSize. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the 'rect' command returns an instance of DrawRectangle. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Tests that the 'reset' command returns an instance of Reset. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the 'tri' command returns an instance of Triangle. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the 'writeto' command returns an instance of WriteTextToCanvas. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo()"
  },
  "api/ASE_Assignment_Test.MyParserTest.html": {
    "href": "api/ASE_Assignment_Test.MyParserTest.html",
    "title": "Class MyParserTest | Ase Project",
    "keywords": "Class MyParserTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the MyParser class, responsible for parsing commands and interacting with the MyCanvas and other related components. [TestClass] public class MyParserTest Inheritance object MyParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes real instances of the required components before each test. Sets up the MyParser, MyCanvas, BOOSE.ICommandFactory, and BOOSE.StoredProgram instances for testing. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests that the ParseCommand method returns a valid command for a known command (e.g., \"clear\"). [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Assignment_Test.MyTriangleTest.html": {
    "href": "api/ASE_Assignment_Test.MyTriangleTest.html",
    "title": "Class MyTriangleTest | Ase Project",
    "keywords": "Class MyTriangleTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the Triangle class. [TestClass] public class MyTriangleTest Inheritance object MyTriangleTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method of the Triangle class does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Triangle constructor initializes correctly when provided with valid base length and height. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Tests that the Triangle constructor correctly sets the base length and height properties. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() TestInitialize() Initializes the test setup by creating a new mock instance of Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.PenSizeUnitTests.html": {
    "href": "api/ASE_Assignment_Test.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | Ase Project",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the MyPenSize class, which sets the pen size for drawing on a BOOSE.Canvas. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when valid parameters (pen size as a string) are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of the MyPenSize class initializes the object correctly when a valid canvas and pen size are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests that the Execute method correctly handles the boundary value of 0 by setting the global pen size to 0. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the mock BOOSE.Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.ResetTest.html": {
    "href": "api/ASE_Assignment_Test.ResetTest.html",
    "title": "Class ResetTest | Ase Project",
    "keywords": "Class ResetTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the Reset class, which resets the state of a BOOSE.Canvas. [TestClass] public class ResetTest Inheritance object ResetTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that the CheckParameters method ignores additional parameters without throwing any exceptions. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that the CheckParameters method does not throw an exception when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the constructor of the Reset class initializes the object correctly when a valid BOOSE.Canvas object is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Tests that the Execute method throws a NullReferenceException when executed without a valid BOOSE.Canvas object. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes the mock BOOSE.Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.SetPenColourTest.html": {
    "href": "api/ASE_Assignment_Test.SetPenColourTest.html",
    "title": "Class SetPenColourTest | Ase Project",
    "keywords": "Class SetPenColourTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the SetPenColour class, which sets the pen color for drawing on a BOOSE.Canvas. [TestClass] public class SetPenColourTest Inheritance object SetPenColourTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw any exceptions when valid parameters (RGB values as strings) are provided. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of the SetPenColour class initializes the object correctly when valid parameters (RGB values) are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the mock BOOSE.Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.WriteTextToCanvasTest.html": {
    "href": "api/ASE_Assignment_Test.WriteTextToCanvasTest.html",
    "title": "Class WriteTextToCanvasTest | Ase Project",
    "keywords": "Class WriteTextToCanvasTest Namespace ASE_Assignment_Test Assembly ASE_Assignment_Test.dll Unit tests for the WriteTextToCanvas class. [TestClass] public class WriteTextToCanvasTest Inheritance object WriteTextToCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Tests that the CheckParameters method does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the constructor of WriteTextToCanvas initializes correctly when valid parameters are provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes test setup by creating a new mock instance of Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Assignment_Test.html": {
    "href": "api/ASE_Assignment_Test.html",
    "title": "Namespace ASE_Assignment_Test | Ase Project",
    "keywords": "Namespace ASE_Assignment_Test Classes CircleTest Unit tests for the DrawCircle class. ClearTest Unit tests for the Clear class. CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic. CommandTest DrawRectangleTest Unit tests for the DrawRectangle class, which draws a rectangle on a BOOSE.Canvas. DrawToPositionTest Unit tests for the DrawToPosition class. FillTest Unit tests for the Fill class. GlobalConfigTest This test class validates the functionality of the GlobalConfig class. It ensures that the properties of GlobalConfig can be correctly set and retrieved. MoveToPositionTest Unit tests for the MoveToPosition class. MyParserTest Unit tests for the MyParser class, responsible for parsing commands and interacting with the MyCanvas and other related components. MyTriangleTest Unit tests for the Triangle class. PenSizeUnitTests Unit tests for the MyPenSize class, which sets the pen size for drawing on a BOOSE.Canvas. ResetTest Unit tests for the Reset class, which resets the state of a BOOSE.Canvas. SetPenColourTest Unit tests for the SetPenColour class, which sets the pen color for drawing on a BOOSE.Canvas. WriteTextToCanvasTest Unit tests for the WriteTextToCanvas class."
  },
  "api/Calculator.Calculator.html": {
    "href": "api/Calculator.Calculator.html",
    "title": "Class Calculator | Ase Project",
    "keywords": "Class Calculator Namespace Calculator Assembly Calculator.dll public class Calculator Inheritance object Calculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods add(int, int) public int add(int num1, int num2) Parameters num1 int num2 int Returns int"
  },
  "api/Calculator.html": {
    "href": "api/Calculator.html",
    "title": "Namespace Calculator | Ase Project",
    "keywords": "Namespace Calculator Classes Calculator"
  },
  "api/ConsoleInputApp.Form1.html": {
    "href": "api/ConsoleInputApp.Form1.html",
    "title": "Class Form1 | Ase Project",
    "keywords": "Class Form1 Namespace ConsoleInputApp Assembly ConsoleInputApp.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ConsoleInputApp.html": {
    "href": "api/ConsoleInputApp.html",
    "title": "Namespace ConsoleInputApp | Ase Project",
    "keywords": "Namespace ConsoleInputApp Classes Form1"
  },
  "api/TestProject1.Test1.html": {
    "href": "api/TestProject1.Test1.html",
    "title": "Class Test1 | Ase Project",
    "keywords": "Class Test1 Namespace TestProject1 Assembly TestProject1.dll [TestClass] public sealed class Test1 Inheritance object Test1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods TestMethod1() [TestMethod] public void TestMethod1()"
  },
  "api/TestProject1.html": {
    "href": "api/TestProject1.html",
    "title": "Namespace TestProject1 | Ase Project",
    "keywords": "Namespace TestProject1 Classes Test1"
  },
  "api/UnitTest.Form1.html": {
    "href": "api/UnitTest.Form1.html",
    "title": "Class Form1 | Ase Project",
    "keywords": "Class Form1 Namespace UnitTest Assembly UnitTest.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/UnitTest.html": {
    "href": "api/UnitTest.html",
    "title": "Namespace UnitTest | Ase Project",
    "keywords": "Namespace UnitTest Classes Form1"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Ase Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Ase Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Ase Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}